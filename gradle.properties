project.name=spring-data-jdbc
project.group=org.hejki.spring
project.version=0.1.0
project.organization=Hejki
project.description=

# Java version (source compatibility)
goot.java=1.8

# Spring platform version (http://platform.spring.io/platform/)
goot.spring.platform=1.1.1.RELEASE

# Use project lombok in project (default:false)
goot.lombok=false

# Use groovy in project (default: false)
goot.groovy=true

# Use flyway migration setup (dafault: false)
goot.flyway=false

# Add automatic slf4j dependency
# choose logging framework: logback, log4j, jcl (commons-logging), jul (java.util.logging)
goot.log=logback

# Add SLF4J bridging for legacy API - http://www.slf4j.org/legacy.html (default: false)
goot.log.bridging=false

# Specify testing framework (default: spock if groovy is enabled otherwise junit)
# available options: none, junit, testng, spock (requires: goot.groovy=true)
goot.test.framework=spock

#TODO Add automatic jdbc driver
# choose database type: postgres, mysql,
#goot.jdbc=postgres

###############
# Spring Boot #
###############

# Spring Boot repackaging with application (default: false)
goot.spring.boot.repackage=true

# The main class that should be run. If not specified the `mainClassName` project property will be used or,
# if the no `mainClassName` id defined the archive will be searched for a suitable class.
# "Suitable" means a unique class with a well-formed `main()` method (if more than one is found
# the build will fail). You should also be able to specify the main class name via the "run" task (`main` property)
# and/or the "startScripts" (`mainClassName` property) as an alternative to using the "springBoot" configuration.
#goot.spring.boot.mainClass=com.doxologic.inntherm.Main

# Define Spring Boot application starter modules, entry list of modules separated by comma (default: empty list)
# some modules (http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter-poms)
#   actuator: Production ready features to help you monitor and manage your application
#   data-elasticsearch: Support for the Elasticsearch search and analytics engine including spring-data-elasticsearch.
#   data-jpa: Support for the \u201CJava Persistence API\u201D including spring-data-jpa, spring-orm and Hibernate.
#   data-mongodb: Support for the MongoDB NoSQL Database, including spring-data-mongodb.
#   data-rest: Support for exposing Spring Data repositories over REST via spring-data-rest-webmvc.
#   integration: Support for common spring-integration modules.
#   jdbc: Support for JDBC databases.
#   mail: Support for javax.mail.
#   security: Support for spring-security.
#   test: Support for common test dependencies, including JUnit, Hamcrest and Mockito along with the spring-test module.
#   thymeleaf: Support for the Thymeleaf templating engine, including integration with Spring.
#   velocity: Support for the Velocity templating engine
#   web: Support for full-stack web development, including Tomcat and spring-webmvc.
#   ws: Support for Spring Web Services.
goot.spring.boot.modules=

##################
# Extra features #
##################

# Enable extra features (features separated by comma)
# Features:
#   - build-dashboard: Set build-dashboard plugin (http://www.gradle.org/docs/current/userguide/buildDashboard_plugin.html)
#goot.extra=build-dashboard

org.gradle.daemon=true
org.gradle.configureondemand=true